import re

import pandas as pd

from .clean import float_to_int_str, names_to_title_case


PERSONNEL_COLUMNS = [
    "uid",  # unique officer identifier, generated by MD5 checksum multiple columns
    "last_name",  # lowercase last name
    "middle_name",  # lowercase middle name
    "middle_initial",  # lowercase middle initial
    "first_name",  # lowercase first name
    "birth_year",
    "birth_month",
    "birth_day",
    "race",
    "sex",
]

COMPLAINT_COLUMNS = [
    "uid",  # officer unique identifier
    "tracking_number",  # unique identifier for complaint
    "complaint_uid",  # unique identifier for complaint but generated for when tracking_number is unavailable
    "charge_uid",  # unique identifier for individual charges
    "investigation_status",
    "assigned_unit",
    "assigned_department",
    "assigned_division",
    "assigned_sub_division_a",
    "assigned_sub_division_b"
    "traffic_stop",
    "body_worn_camera_available",
    "app_used",
    "citizen_arrested",
    "allegation_finding",
    "allegation",
    "allegation_class",
    "citizen",
    "disposition",
    "rule_code",  # deprecated, use "charges" field instead
    "rule_violation",  # deprecated, use "charges" field instead
    "paragraph_code",  # deprecated, use "charges" field instead
    "paragraph_violation",  # deprecated, use "charges" field instead
    # "charges" combine all rule violations (and paragraphs)
    # and should eventually replace rule_* and paragraph_* columns.
    "charges",
    "officer_years_of_service",
    "complainant_name",
    "complainant_type",
    "complainant_sex",
    "complainant_race",
    "complainant_age",
    "action",  # list of actions taken separated by ' | '
    "data_production_year",  # year of data
    "agency",  # name of agency (e.g. "New Orleans CSD")
    "incident_type",
    "supervisor_uid",
    "supervisor_rank",
    "supervisor_name",
    "badge_no",  # badge number
    "department_code",  # department code or id
    "department_desc",  # department title or description
    "rank_code",  # rank code
    "rank_desc",  # rank title or description
    "employment_status",
    "investigator",
    "investigator_uid",
    "investigator_rank",
    "shift_supervisor",
    # "Complaint Classification",  # ?
    # "Bureau of Complainant",  # ?
    # "Division of Complainant",  # ?
    # "Unit of Complainant",  # ?
    # "Unit Additional Details of Complainant",  # ?
    # "Working Status of Complainant",  # ?
    # "Shift of Complainant",  # ?
]

APPEAL_HEARING_COLUMNS = [
    "appeal_uid",  # unique per docket_no and uid
    "resolution_uid",  # unique per appeal_uid, hearing_date and resolution
    "docket_no",
    "uid",
    "counsel",
    "charging_supervisor",
    "resolution",
    "action",
    "delay",
    "appealed",
    "agency",
    "data_production_year"
]

USE_OF_FORCE_COLUMNS = [
    'uof_uid',
    'uof_tracking_number',
    'report_year',
    'uid',
    'force_description',
    'force_type',
    'force_level',
    'effective_uof',
    'accidental_discharge',
    'less_than_lethal',
    'status',
    'source',
    'service_type',
    'county',
    'traffic_stop',
    'sustained',
    'force_reason',
    'weather_description',
    'distance_from_officer',
    'body_worn_camera_available',
    'app_used',
    'citizen_uid',
    'citizen_arrested',
    'citizen_hospitalized',
    'citizen_injured',
    'citizen_body_type',
    'citizen_height',
    'citizen_age',
    'citizen_involvement',
    'disposition',
    'citizen_sex',
    'citizen_race',
    'citizen_age_1',
    'officer_current_supervisor',
    'officer_title',
    'officer_injured',
    'officer_age',
    'officer_years_exp',
    'officer_years_with_unit',
    'officer_type',
    'officer_employment_status',
    'officer_department',
    'officer_division',
    'officer_sub_division_a',
    'officer_sub_division_b',
    "agency",
    "data_production_year",
]

EVENT_COLUMNS = [
    # common columns
    "event_uid",
    "kind",
    "year",
    "month",
    "day",
    "time",
    "raw_date",

    # situational
    "uid",  # officer unique identifier
    "complaint_uid",
    "appeal_uid",
    "resolution_uid",
    'uof_uid',
    "agency",  # name of agency (e.g. "New Orleans CSD")
    "badge_no",  # badge number
    "employee_id",  # employee ID given to the person by the agency.
    "department_code",  # department code or id
    "department_desc",  # department title or description
    "division_desc",
    "sub_division_a_desc",
    "sub_division_b_desc",
    "current_supervisor",
    "employee_class",
    "rank_code",  # rank code
    "rank_desc",  # rank title or description
    "officer_employment_status",
    "sworn",
    "officer_inactive",
    "employee_type",
    "years_employed",
    "salary",
    "salary_freq",
    "award",
    "award_comments",
    "left_reason",
    "officer_contract_status",  # full time, part time, or volunteer
    "time_employed",  # duration of employment
]


def clean_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """Removes unnamed columns and convert column names to snake case

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    df = df[[col for col in df.columns if not col.startswith("Unnamed:")]]
    df.columns = [
        re.sub(r"[\s\W]+", "_", col.strip()).lower().strip("_")
        for col in df.columns]
    return df


def set_values(df: pd.DataFrame, value_dict: dict) -> pd.DataFrame:
    """Set entire column to a value.

    Multiple columns can be specified each as a single key in value_dict

    Examples:
        >>> df = set_values(df, {
        ...     "agency": "Brusly PD",
        ...     "data_production_year": 2020
        ... })

    Args:
        df (pd.DataFrame):
            the frame to process
        value_dict (dict):
            the mapping between column name and what value should be set
            for that column.

    Returns:
        the updated frame
    """
    for col, val in value_dict.items():
        df.loc[:, col] = val
    return df


def rearrange_personnel_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Performs final processing step for a personnel table

    This performs the following tasks:
    - discard rows with empty uid
    - discard columns not present in PERSONNEL_COLUMNS
    - drop row duplicates
    - convert name columns to title case
    - convert numeric columns to int or str

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    existing_cols = set(df.columns)
    df = df[df.uid.notna() & (df.uid != '')]
    df = df[[col for col in PERSONNEL_COLUMNS if col in existing_cols]]\
        .drop_duplicates(ignore_index=True)
    return df\
        .pipe(names_to_title_case, ["first_name", "last_name", "middle_name", "middle_initial"])\
        .pipe(float_to_int_str, ["birth_year", "birth_month", "birth_day"])\
        .sort_values('uid')


def rearrange_event_columns(df):
    """Performs final processing step for an event table

    This performs the following tasks:
    - discard columns not present in EVENT_COLUMNS
    - drop row duplicates
    - convert numeric columns to int or str

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    existing_cols = set(df.columns)
    return float_to_int_str(
        df[[
            col for col in EVENT_COLUMNS if col in existing_cols
        ]].drop_duplicates(ignore_index=True),
        [
            "badge_no",
            "employee_id",
            "year",
            "month",
            "day",
            "years_employed",
            "department_code",
            "rank_code"
        ]).sort_values(['agency', 'kind', 'event_uid'])


def rearrange_complaint_columns(df):
    """Performs final processing step for a complaint table

    This performs the following tasks:
    - discard columns not present in COMPLAINT_COLUMNS
    - drop row duplicates
    - convert numeric columns to int or str

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    existing_cols = set(df.columns)
    return float_to_int_str(
        df[[col for col in COMPLAINT_COLUMNS if col in existing_cols]]
        .drop_duplicates(ignore_index=True),
        [
            "paragraph_code",
        ]).sort_values(['agency', 'complaint_uid'])


def rearrange_appeal_hearing_columns(df):
    """Performs final processing step for an appeal hearing table

    This performs the following tasks:
    - discard columns not present in APPEAL_HEARING_COLUMNS
    - drop row duplicates
    - convert counsel name to title case

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    existing_cols = set(df.columns)
    df = df[[
            col for col in APPEAL_HEARING_COLUMNS
            if col in existing_cols
            ]].drop_duplicates(ignore_index=True)
    return names_to_title_case(df, ["counsel"]).sort_values(['agency', 'appeal_uid'])


def rearrange_use_of_force(df):
    """Performs final processing step for a uof table

    This performs the following tasks:
    - discard columns not present in USE_OF_FORCE_COLUMNS
    - drop row duplicates
    - convert numeric columns to int or str

    Args:
        df (pd.DataFrame):
            the frame to process

    Returns:
        the updated frame
    """
    existing_cols = set(df.columns)
    return float_to_int_str(
        df[[
            col for col in USE_OF_FORCE_COLUMNS
            if col in existing_cols
        ]].drop_duplicates(ignore_index=True),
        [
            'citizen_age', 'citizen_age_1', 'officer_current_supervisor', 'officer_age',
            'officer_years_exp', 'officer_years_with_unit'
        ]).sort_values(['agency', 'uof_uid'])
